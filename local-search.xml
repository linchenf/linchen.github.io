<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker部署python运行环境实战</title>
    <link href="/2023/05/07/docker%E9%83%A8%E7%BD%B2python%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%AE%9E%E6%88%98/"/>
    <url>/2023/05/07/docker%E9%83%A8%E7%BD%B2python%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>利用docker/docker-comose工具完成至少3种不同动态语言（PHP/Java/Python/Go/Perl/Nodejs…）运行环境的搭建，并实现从mysql/mongodb等数据库中读取数据到Web页面中显示  </p><p>前置条件：要求已经安装好docker、docker-compose环境，并且准备好一个可以使用的数据库。</p><h2 id="python篇"><a href="#python篇" class="headerlink" title="python篇"></a>python篇</h2><ol><li>创建一个名为 python-demo-test 的目录，用于存放整个项目的代码和 Dockerfile 文件。  </li><li>在 python-demo-test 目录下创建一个名为 Dockerfile 的文件，并将以下内容添加到文件中：</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">7</span><br><br><span class="hljs-comment"># 安装必要的工具和依赖项</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum update -y &amp;&amp; \</span><br><span class="language-bash">    yum install -y epel-release &amp;&amp; \</span><br><span class="language-bash">    yum install -y gcc gcc-c++ python3 python3-devel python3-pip mariadb mariadb-devel mariadb-libs &amp;&amp; \</span><br><span class="language-bash">    yum clean all &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">rm</span> -rf /var/cache/yum</span><br><br><span class="hljs-comment"># 设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-comment"># 复制应用程序代码和依赖项清单到容器中</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment"># 安装 Python 依赖项</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip3 install --no-cache-dir -r requirements.txt</span><br><br><span class="hljs-comment"># 设置环境变量</span><br><span class="hljs-keyword">ENV</span> DB_HOST=<span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span> <span class="hljs-comment">#替换为你的主机地址</span><br><span class="hljs-keyword">ENV</span> DB_NAME=docker-demo <span class="hljs-comment">#数据库名</span><br><span class="hljs-keyword">ENV</span> DB_USER=root <span class="hljs-comment">#数据库用户名</span><br><span class="hljs-keyword">ENV</span> DB_PASSWORD=example<span class="hljs-comment">#数据库连接密码</span><br><br><span class="hljs-comment"># 开放端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">5000</span><br><br><span class="hljs-comment"># 启动应用程序</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python3&quot;</span>, <span class="hljs-string">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>在该文件中指定了 CentOS 7 镜像作为基础镜像，然后安装了一些必要的工具和依赖项，包括 Python 3、pip、MariaDB 数据库等等。接着将工作目录设置为 <code>/app</code>，并将应用程序代码和依赖项清单复制到容器中。然后使用 pip3 安装依赖项，设置了一些环境变量，并且开放了端口 5000。最后，启动了应用程序。 </p><p>3.在 python-demo-test 目录下创建一个名为 <code>requirements.txt</code> 的文件，并将以下内容添加到文件中：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">Flask</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.0</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">mysql-connector</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.2</span>.<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p> 这个文件列出了应用程序所需的两个 Python 依赖项：Flask 和 mysql-connector。 </p><p>4.在 python-demo-test 目录下创建一个名为 <code>app.py</code> 的 Python 文件，并将以下内容添加到文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><span class="hljs-keyword">import</span> mysql.connector<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    connection = mysql.connector.connect(<br>        host=os.environ[<span class="hljs-string">&quot;DB_HOST&quot;</span>],<br>        user=os.environ[<span class="hljs-string">&quot;DB_USER&quot;</span>],<br>        password=os.environ[<span class="hljs-string">&quot;DB_PASSWORD&quot;</span>],<br>        database=os.environ[<span class="hljs-string">&quot;DB_NAME&quot;</span>]<br>    )<br>    cursor = connection.cursor()<br>    cursor.execute(<span class="hljs-string">&quot;SELECT * FROM user&quot;</span>)<br>    data = cursor.fetchall()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, data=data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p> 这个 Python 文件使用 Flask 框架创建了一个简单的 Web 应用程序。在 <code>/</code> 路由上，它连接到 MySQL 数据库，执行一个 <code>SELECT</code> 查询，将结果作为数据传递给一个名为 <code>index.html</code> 的模板文件，用于在 Web 页面中显示数据。 </p><p>5.仍在该目录下 创建一个名为 <code>templates</code> 的目录，并在其中创建一个名为 <code>index.html</code> 的文件，其中包含以下内容： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Web App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Data:<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        &#123;% for row in data %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; row &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 这个模板文件将在 Web 页面上显示从 MySQL 数据库中检索到的数据。 </p><p>6.同目录下创建一个名为 <code>docker-compose.yml</code> 的文件，并将以下内容添加到文件中： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5000:5000&quot;</span><br></code></pre></td></tr></table></figure><p> 这个 <code>docker-compose.yml</code> 文件定义了一个 Web 应用程序服务，使用上一步中定义的 Dockerfile 构建。Web 服务将暴露端口 5000。 </p><p>7.运行如下命令根据dockerfile文件打包镜像并在容器中运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up<br></code></pre></td></tr></table></figure><p>打包运行过程比较漫长，因为需要联网下载python依赖。一顿等待后没有报错，输入docker ps查看</p> <img src="/2023/05/07/docker%E9%83%A8%E7%BD%B2python%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%AE%9E%E6%88%98/1.png" class=""> <p>可以看到对应容器已经在5000端口运行了，并且制作了对应的镜像</p> <img src="/2023/05/07/docker%E9%83%A8%E7%BD%B2python%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%AE%9E%E6%88%98/2.png" class=""> <p>访问服务器ip:5000端口可以看到成功显示了页面并从数据库中获取到了数据：</p> <img src="/2023/05/07/docker%E9%83%A8%E7%BD%B2python%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%AE%9E%E6%88%98/3.png" class=""> <p>完成！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>项目集成baskreport报表项目并实现单点登录</title>
    <link href="/2023/05/05/%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90baskreport%E6%8A%A5%E8%A1%A8%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    <url>/2023/05/05/%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90baskreport%E6%8A%A5%E8%A1%A8%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>在公司实习，有一个新的需求是在原有的项目中集成baskreport报表项目，并实现单点登录，baskreport官方文档的介绍过于简单，我琢磨了一天才得以实现，记录一下详细的实现过程。</p><h2 id="集成baskreport项目"><a href="#集成baskreport项目" class="headerlink" title="集成baskreport项目"></a>集成baskreport项目</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basksoft.report<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>baskreport-font<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basksoft.report<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>baskreport-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basksoft.report<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>baskreport-designer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-注册拦截器"><a href="#2-注册拦截器" class="headerlink" title="2.注册拦截器"></a>2.注册拦截器</h3><p>由于我的项目集成了SpringSecurity，只需要在原有的类中再注册一个baskreport的拦截过滤器即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourcesConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span><br>&#123;<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> FilterRegistrationBean&lt;BaskReportFilter&gt; <span class="hljs-title function_">registerReportFilter</span><span class="hljs-params">()</span> &#123;<br>      FilterRegistrationBean&lt;BaskReportFilter&gt; registration = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>&lt;BaskReportFilter&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BaskReportFilter</span>());<br>      registration.addUrlPatterns(<span class="hljs-string">&quot;/*&quot;</span>);<br>      registration.setName(<span class="hljs-string">&quot;baskreportFilter&quot;</span>);<br>      registration.setOrder(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">return</span> registration;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-springSecurity配置匿名访问"><a href="#3-springSecurity配置匿名访问" class="headerlink" title="3.springSecurity配置匿名访问"></a>3.springSecurity配置匿名访问</h3><p>此外，对于baskreport项目的路径，由于要使用其内置的认证逻辑，因此再springSecurity核心配置类中配置允许匿名访问url</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.antMatchers(<span class="hljs-string">&quot;/**baskreport/**&quot;</span>).anonymous()<br></code></pre></td></tr></table></figure><p>至此，项目已经成功集成了baskreport项目，可以通过改变url路径来直接进行访问，</p><p>譬如：我的项目启动地址是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span>/reconvue<br></code></pre></td></tr></table></figure><p>则baskreport项目地址是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span>/baskreport<br></code></pre></td></tr></table></figure><h2 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h2><p>此时在原有的系统中登录后，访问baskreport的页面仍然需要再次进行登录操作，接下来是配置单点登录的实现过程。</p><h3 id="1-自定义处理器"><a href="#1-自定义处理器" class="headerlink" title="1.自定义处理器"></a>1.自定义处理器</h3><p>首先需要添加官方文档中提供的两个处理类：注意两个类都需要添加@Component注解将他们放入容器，否则baskreport核心仍然会使用其默认的处理类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.basksoft.report.core.database.manager.role.RoleManager;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.manager.user.UserManager;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.model.Page;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.model.User;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.serivce.user.UserService;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ACCOUNT_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;account&quot;</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USERNAME_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;username&quot;</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DESC_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;desc&quot;</span>;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUsers</span><span class="hljs-params">(Page&lt;User&gt; page, Map&lt;String, Object&gt; map)</span> &#123;<br><br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> User <span class="hljs-title function_">get</span><span class="hljs-params">(String account)</span> &#123;<br>      <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserManager.ins.get(account);<br>      user.setRoles(RoleManager.ins.getUserRoles(user.getAccount()));<br>      <span class="hljs-keyword">return</span> user;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> User <span class="hljs-title function_">validate</span><span class="hljs-params">(String s, String s1)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.basksoft.report.console.security.entity.DefaultUser;<br><span class="hljs-keyword">import</span> com.basksoft.report.console.security.entity.User;<br><span class="hljs-keyword">import</span> com.basksoft.report.console.security.provider.SecurityProvider;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.model.Role;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.serivce.user.UserServiceManager;<br><span class="hljs-keyword">import</span> com.bkdr.common.core.domain.model.LoginUser;<br><span class="hljs-keyword">import</span> com.bkdr.framework.web.service.TokenService;<br><span class="hljs-keyword">import</span> com.bkdr.framework.web.service.UserDetailsServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultSecurityProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityProvider</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LOGIN_USER=<span class="hljs-string">&quot;_baskreport_login_user&quot;</span>;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getLoginUser</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> req.getSession().getAttribute(LOGIN_USER);<br>      <span class="hljs-keyword">if</span> (obj!=<span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">return</span> (User)obj;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(HttpServletRequest req, String account, String password)</span> &#123;<br>      com.basksoft.report.core.database.model.<span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserServiceManager.getUserService().validate(account, password);<br><br>      List&lt;Role&gt; roles = com.basksoft.report.core.database.manager.role.RoleManager.ins.getUserRoles(account);<br>      List&lt;Long&gt; roleCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Long&gt;();<br>      <span class="hljs-keyword">if</span> (roles!=<span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">for</span> (Role role:roles) &#123;<br>            roleCodes.add(role.getId());<br>         &#125;<br>      &#125;<br>      <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultUser</span>(account, user.getUsername(), user.isEnable(), user.isAdmin(), roleCodes);<br>      req.getSession().setAttribute(LOGIN_USER, loginUser);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logout</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>      req.getSession().removeAttribute(LOGIN_USER);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-配置调用处理器"><a href="#2-配置调用处理器" class="headerlink" title="2.配置调用处理器"></a>2.配置调用处理器</h3><p>随后在系统原本的登录逻辑中调用自定义的DefaultSecurityProvider实现baskreport的登录即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.basksoft.report.console.security.SecurityUtils.getSecurityProvider().login(request, username, password);<br></code></pre></td></tr></table></figure><p>此时在登录原有的系统时会同时登录baskreport系统，此后当需要进行访问时，就不再需要登录认证了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dependencyManagement的理解</title>
    <link href="/2023/05/04/DependencyManagement%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2023/05/04/DependencyManagement%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="DependencyManagement的理解与遇到的问题"><a href="#DependencyManagement的理解与遇到的问题" class="headerlink" title="DependencyManagement的理解与遇到的问题"></a>DependencyManagement的理解与遇到的问题</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>在Maven中 <dependencyManagement>元素是用于管理依赖项的重要部分之一，它提供了一种集中式的方式来指定项目的依赖项及其版本号，以确保所有的子模块都使用相同的依赖版本或灵活地自定义依赖版本。 </p><p>示例说明：</p><p>在父模块中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么在子模块中只需要<groupId>和<artifactId>即可，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><dependencyManagement>元素的作用可以简单总结为：</p><ol><li>集中管理依赖版本：将所有子模块所需的依赖项及其版本定义在一个地方，确保所有子模块使用相同的依赖版本，避免版本冲突问题；当需要变更版本号的时候只需要在父类容器里更新，不需要任何一个子项目的修改；如果某个子项目需要另外一个特殊的版本号时，只需要在自己的模块dependencies中声明一个版本号即可。子类就会使用子类声明的版本号，不继承于父类版本号。</li><li>简化pom.xml文件：将一些通用的依赖项和版本号定义在<dependencyManagement>元素中，可以减少pom.xml文件的冗余信息，使其更易于维护和阅读；</li><li>提高项目的可维护性和稳定性：通过统一管理依赖版本，可以降低项目的维护成本，提高项目的稳定性和可维护性。</li></ol><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>​        在原有的项目中继承baskreport报表生成工具，要实现在原项目中登录操作后进入baskreport界面不需要再次进行登录操作的单点登录功能。</p><p>​        步骤：在父工程的dependencyManagement中添加完整依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basksoft.report<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>baskreport-font<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;baskreport-font.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basksoft.report<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>baskreport-designer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;baskreport-designer.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​        随后在子模块中直接引入，刷新maven依赖，依赖成功引入，此时运行项目报错！lombok依赖找不到了！尝试在子模块中依赖的模块中引入，报错swagger依赖找不到！此后进行了一系列清除缓存、重新加载依赖，重启项目的操作都没有作用，真的是吐血了…….最后将父模块中的上述代码删掉，改为直接在子模块中引入完整依赖，刷新maven，运行，项目启动成功！！！</p><p>​        在网上查找没有找到相似的经验贴，只能初步判定应该是依赖版本冲突的问题，个人也还没有理解其中的原因。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/03/hello-world/"/>
    <url>/2023/05/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
