<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringAOP应用</title>
    <link href="/2023/05/31/SpringAOP%E5%BA%94%E7%94%A8/"/>
    <url>/2023/05/31/SpringAOP%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>需求：原本的增删改查接口已写好，先需要对接口方法执行前增加一些判断，但不符合要求时返回错误，而不执行相应的方法。</p><p>思考：涉及同一包下多个模块的controller，为了提高代码重用性，决定采用aop的思想将这部分的判断逻辑抽象出来切入到对应的模块中。</p><h2 id="关键注解"><a href="#关键注解" class="headerlink" title="关键注解"></a>关键注解</h2><p>先介绍下下述过程中需要用到的几个关键注解：</p><h3 id="异常声明类"><a href="#异常声明类" class="headerlink" title="异常声明类"></a>异常声明类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SneakyThrows</span><br></code></pre></td></tr></table></figure><p>​    是 Lombok 提供的一个注解，它可以用于简化 Java 代码中的异常处理。通常情况下，Java 中的方法需要在方法签名上声明要抛出的异常类型，或者使用 try-catch 块来捕获和处理异常。而使用 <code>@SneakyThrows</code> 注解，可以在方法中抛出受检查异常（checked exception）而不需要在方法签名上声明该异常。此外，<code>@SneakyThrows</code> 注解还会自动捕获和重新抛出任何非受检查异常（unchecked exception），从而起到简化代码的作用。</p><h3 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br></code></pre></td></tr></table></figure><p>定义一个切面，用于指定切面要应用的方法或类，并定义通知，可以将多个通知集成到一个切面中。步骤如下：</p><ol><li>定义一个切面类，并在类上添加 <code>@Aspect</code> 注解。</li><li>定义一个或多个切点（Pointcut），用于匹配需要应用切面的方法。</li><li>定义一个或多个通知（Advice），用于在切点匹配到的方法执行前、执行后或执行过程中执行一些操作。</li></ol><h3 id="切点类"><a href="#切点类" class="headerlink" title="切点类"></a>切点类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PointCut</span><br></code></pre></td></tr></table></figure><p>定义一个切点，用于指定切面要应用的方法或类。</p><h3 id="通知类"><a href="#通知类" class="headerlink" title="通知类"></a>通知类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around</span><br></code></pre></td></tr></table></figure><p><code>@Around</code> 是 Spring 框架中的一个切面（Aspect）注解，它可以用于定义一个环绕通知（Around Advice），即在目标方法执行前后都执行一些逻辑，可以控制目标方法的执行流程。</p><p>使用 <code>@Around</code> 注解，需要定义一个方法，该方法的返回值类型为 <code>Object</code>，并且接受一个 <code>ProceedingJoinPoint</code> 参数。<code>ProceedingJoinPoint</code> 是 Spring 框架提供的一个接口，它表示连接点（Join Point）即目标方法的执行点，可以在该接口中调用 <code>proceed()</code> 方法来继续执行该方法。</p><p>类似的注解还有:</p><ol><li><code>@Around</code>：在目标方法执行前后都执行该方法，可以控制目标方法的执行流程。</li><li><code>@Before</code>：在目标方法执行前执行该方法，可以用于进行一些预处理操作。</li><li><code>@After</code>：在目标方法执行后执行该方法，可以用于进行一些后处理操作。</li><li><code>@AfterReturning</code>：在目标方法执行后执行该方法，可以用于获取目标方法的返回值并进行处理。</li><li><code>@AfterThrowing</code>：在目标方法抛出异常时执行该方法，可以用于捕获和处理异常。</li></ol><p>@After与@AfterReturning的主要区别在于前者无论目标方法是否抛出异常都会执行，主要用于一些后置处理操作如释放资源、记录日志等，而后者只有当目标方法正确执行并返回结果时才会执行，主要是为了对返回结果做一些处理等。</p><h2 id="AOP实战"><a href="#AOP实战" class="headerlink" title="AOP实战"></a>AOP实战</h2><p>以如下增添接口为例，该接口位于 com.bkdr.weeklyReport.controller 包下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult&lt;Long&gt; <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> <span class="hljs-meta">@RequestBody</span> FinanceWeeklyReportAddBo bo)</span> &#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(iFinanceWeeklyReportService.insertByAddBo(bo));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DszAnnotationsMonitor</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义切点"><a href="#定义切点" class="headerlink" title="定义切点"></a>定义切点</h3><p>切点是com.bkdr包下所有子包下的controller包的所有controller类的add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* com.bkdr.*.controller.*.add(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMethodsPointCut</span><span class="hljs-params">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义通知"><a href="#定义通知" class="headerlink" title="定义通知"></a>定义通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(value = &quot;addMethodsPointCut()&quot;)</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">checkDate</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>   <span class="hljs-type">FinanceWeeklyReportAddBo</span> <span class="hljs-variable">addBo</span> <span class="hljs-operator">=</span> (FinanceWeeklyReportAddBo) joinPoint.getArgs()[<span class="hljs-number">0</span>];<br>   <span class="hljs-comment">//获取queryBo对象</span><br>   <span class="hljs-type">FinanceWeeklyReportQueryBo</span> <span class="hljs-variable">bo</span> <span class="hljs-operator">=</span> (FinanceWeeklyReportQueryBo)getBo(joinPoint, <span class="hljs-string">&quot;Add&quot;</span>, <span class="hljs-string">&quot;Query&quot;</span>);<br>   <span class="hljs-comment">//获取service bean对象</span><br>   <span class="hljs-type">Object</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> getService(joinPoint);<br>   <span class="hljs-comment">//执行查询方法</span><br>   <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> getQueryListMethods(service, <span class="hljs-string">&quot;queryList&quot;</span>);<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    ...查询数据库判断能否添加的逻辑</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">//根据业务逻辑判断执行逻辑，                 返回500错误码         继续执行方法</span><br>   <span class="hljs-keyword">return</span> weeklySize != <span class="hljs-number">0</span> ? AjaxResult.error(<span class="hljs-string">&quot;本周周报已存在&quot;</span>) : joinPoint.proceed();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>上面的方法中用到的方法getService()是对反射的应用，也挺有意思的，值得学习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getService</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>Field[] fields = joinPoint.getTarget().getClass().getDeclaredFields(); <span class="hljs-comment">//通过joinPoint的target就是目标controller</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//在每个controller中一般都会注入其对应的service，因此可以便利其属性得到service</span><br><span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>field.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">if</span> (field.isAnnotationPresent(Resource.class) || (field.isAnnotationPresent(Autowired.class))) &#123;<br>service = SpringUtil.getBean(field.getType());<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> service;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>bug记录</title>
    <link href="/2023/05/20/bug%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/05/20/bug%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>java中对于String类型的比较切记不能使用==，在业务逻辑上如果顺手直接等等比较有时会排查半天才能找到问题</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker实战</title>
    <link href="/2023/05/07/docker%E5%AE%9E%E6%88%98/"/>
    <url>/2023/05/07/docker%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>利用docker/docker-comose工具完成至少3种不同动态语言（PHP/Java/Python/Go/Perl/Nodejs…）运行环境的搭建，并实现从mysql/mongodb等数据库中读取数据到Web页面中显示  </p><p>前置条件：要求已经安装好docker、docker-compose环境，并且准备好一个可以使用的数据库。</p><h2 id="python篇"><a href="#python篇" class="headerlink" title="python篇"></a>python篇</h2><ol><li>创建一个名为 python-demo-test 的目录，用于存放整个项目的代码和 Dockerfile 文件。  </li><li>在 python-demo-test 目录下创建一个名为 Dockerfile 的文件，并将以下内容添加到文件中：</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">7</span><br><br><span class="hljs-comment"># 安装必要的工具和依赖项</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum update -y &amp;&amp; \</span><br><span class="language-bash">    yum install -y epel-release &amp;&amp; \</span><br><span class="language-bash">    yum install -y gcc gcc-c++ python3 python3-devel python3-pip mariadb mariadb-devel mariadb-libs &amp;&amp; \</span><br><span class="language-bash">    yum clean all &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">rm</span> -rf /var/cache/yum</span><br><br><span class="hljs-comment"># 设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-comment"># 复制应用程序代码和依赖项清单到容器中</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment"># 安装 Python 依赖项</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip3 install --no-cache-dir -r requirements.txt</span><br><br><span class="hljs-comment"># 设置环境变量</span><br><span class="hljs-keyword">ENV</span> DB_HOST=<span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span> <span class="hljs-comment">#替换为你的服务器地址</span><br><span class="hljs-keyword">ENV</span> DB_NAME=docker-demo <span class="hljs-comment">#数据库名</span><br><span class="hljs-keyword">ENV</span> DB_USER=root <span class="hljs-comment">#数据库用户名</span><br><span class="hljs-keyword">ENV</span> DB_PASSWORD=example<span class="hljs-comment">#数据库连接密码</span><br><br><span class="hljs-comment"># 开放端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">5000</span><br><br><span class="hljs-comment"># 启动应用程序</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python3&quot;</span>, <span class="hljs-string">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>在该文件中指定了 CentOS 7 镜像作为基础镜像，然后安装了一些必要的工具和依赖项，包括 Python 3、pip、MariaDB 数据库等等。接着将工作目录设置为 <code>/app</code>，并将应用程序代码和依赖项清单复制到容器中。然后使用 pip3 安装依赖项，设置了一些环境变量，并且开放了端口 5000。最后，启动了应用程序。 </p><p>3.在 python-demo-test 目录下创建一个名为 <code>requirements.txt</code> 的文件，并将以下内容添加到文件中：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">Flask</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.0</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">mysql-connector</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.2</span>.<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p> 这个文件列出了应用程序所需的两个 Python 依赖项：Flask 和 mysql-connector。 </p><p>4.在 python-demo-test 目录下创建一个名为 <code>app.py</code> 的 Python 文件，并将以下内容添加到文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><span class="hljs-keyword">import</span> mysql.connector<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    connection = mysql.connector.connect(<br>        host=os.environ[<span class="hljs-string">&quot;DB_HOST&quot;</span>],<br>        user=os.environ[<span class="hljs-string">&quot;DB_USER&quot;</span>],<br>        password=os.environ[<span class="hljs-string">&quot;DB_PASSWORD&quot;</span>],<br>        database=os.environ[<span class="hljs-string">&quot;DB_NAME&quot;</span>]<br>    )<br>    cursor = connection.cursor()<br>    cursor.execute(<span class="hljs-string">&quot;SELECT * FROM user&quot;</span>)<br>    data = cursor.fetchall()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, data=data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p> 这个 Python 文件使用 Flask 框架创建了一个简单的 Web 应用程序。在 <code>/</code> 路由上，它连接到 MySQL 数据库，执行一个 <code>SELECT</code> 查询，将结果作为数据传递给一个名为 <code>index.html</code> 的模板文件，用于在 Web 页面中显示数据。 </p><p>5.仍在该目录下 创建一个名为 <code>templates</code> 的目录，并在其中创建一个名为 <code>index.html</code> 的文件，其中包含以下内容： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Web App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Data:<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        &#123;% for row in data %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; row &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 这个模板文件将在 Web 页面上显示从 MySQL 数据库中检索到的数据。 </p><p>6.同目录下创建一个名为 <code>docker-compose.yml</code> 的文件，并将以下内容添加到文件中： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5000:5000&quot;</span><br></code></pre></td></tr></table></figure><p> 这个 <code>docker-compose.yml</code> 文件定义了一个 Web 应用程序服务，使用上一步中定义的 Dockerfile 构建。Web 服务将暴露端口 5000。 </p><p>7.运行如下命令根据dockerfile文件打包镜像并在容器中运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up<br></code></pre></td></tr></table></figure><p>打包运行过程比较漫长，因为需要联网下载python依赖。一顿等待后没有报错，输入docker ps查看</p> <img src="/2023/05/07/docker%E5%AE%9E%E6%88%98/1.png" class=""> <p>可以看到对应容器已经在5000端口运行了，并且制作了对应的镜像</p> <img src="/2023/05/07/docker%E5%AE%9E%E6%88%98/2.png" class=""> <p>访问服务器ip:5000端口可以看到成功显示了页面并从数据库中获取到了数据：</p> <img src="/2023/05/07/docker%E5%AE%9E%E6%88%98/3.png" class=""> <p>完成！</p><h2 id="nodejs篇"><a href="#nodejs篇" class="headerlink" title="nodejs篇"></a>nodejs篇</h2><p>1.创建一个nodejs-docker-demo文件夹用来存放Dockerfile与项目代码</p><p>2.进入该目录，在该目录下创建 一个名为 <code>Dockerfile</code> 的文件，用于定义 Node.js 运行环境的镜像。 </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">7</span><br><br><span class="hljs-comment"># 安装必要的软件包</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum update -y &amp;&amp; \</span><br><span class="language-bash">    yum install -y epel-release &amp;&amp; \</span><br><span class="language-bash">    yum install -y curl &amp;&amp; \</span><br><span class="language-bash">    curl -sL https://rpm.nodesource.com/setup_14.x | bash - &amp;&amp; \</span><br><span class="language-bash">    yum install -y nodejs &amp;&amp; \</span><br><span class="language-bash">    yum clean all</span><br><br><span class="hljs-comment"># 设置工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-comment"># 复制项目文件</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package*.json ./</span><br><br><span class="hljs-comment"># 安装依赖</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br><br><span class="hljs-comment"># 复制项目文件</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment"># 暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8081</span><br><br><span class="hljs-comment"># 运行应用程序</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [ <span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;start&quot;</span> ]</span><br></code></pre></td></tr></table></figure><p> 上述 Dockerfile 文件使用 CentOS 最新版本作为基础镜像，并安装了必要的软件包和 Node.js。然后设置了工作目录并复制项目文件，安装依赖并执行启动命令。 </p><p>3.创建一个名为 <code>index.js</code> 的文件，用于编写 Node.js 代码。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-keyword">const</span> connection = mysql.<span class="hljs-title function_">createConnection</span>(&#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;1.1.1.1&#x27;</span>, <span class="hljs-comment">//服务器地址</span><br>  <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;***711&#x27;</span>, <span class="hljs-comment">//数据库代码</span><br>  <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;docker-demo&#x27;</span><br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  connection.<span class="hljs-title function_">query</span>(<span class="hljs-string">&#x27;SELECT * FROM user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, results, fields</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br><br>    <span class="hljs-keyword">const</span> data = results.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> (&#123;<br>      <span class="hljs-attr">id</span>: result.<span class="hljs-property">id</span>,<br>      <span class="hljs-attr">name</span>: result.<span class="hljs-property">name</span><br>    &#125;));<br><br>    res.<span class="hljs-title function_">send</span>(data);<br>  &#125;);<br>&#125;);<br><br><span class="hljs-keyword">const</span> port = process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">8081</span>;<br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`App listening on port <span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>4.创建一个名为 <code>package.json</code> 的文件，用于定义 Node.js 应用程序的依赖项。 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;myapp&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;My Node.js app&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;express&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.17.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mysql&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.18.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>5.在该目录下运行命令构建docker镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -t nodejs-docker-demo:1.0 .<br><br></code></pre></td></tr></table></figure><p>6.创建并启动容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d --name nodejs-demo -p <span class="hljs-number">8081</span>:<span class="hljs-number">8081</span> nodejs-docker-demo:<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>容器成功创建并启动，访问对应端口地址可以正确从数据库中获取到数据。</p><h2 id="java篇"><a href="#java篇" class="headerlink" title="java篇"></a>java篇</h2><p>1.在/root下创建java-docker-compose-test文件夹</p><p>2.利用xftp将java-demo.jar、jdk8.tar.gz传输到此文件夹，java-demo自己创建一个springboot项目写一个简单的接口访问数据库即可；jdk需要自行在官网下载，注意不同小版本的jdk解压后的文件夹名会有差异，需要在Dockerfile文件中自行修改。</p><p>3.创建Dockfile文件，并输入以下内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 指定基础镜像</span><br><span class="hljs-keyword">FROM</span> centos:latest<br><span class="hljs-comment"># 配置环境变量，JDK的安装目录</span><br><span class="hljs-keyword">ENV</span> JAVA_DIR=/usr/local<br><br><span class="hljs-comment"># 拷贝jdk和java项目的包</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="hljs-variable">$JAVA_DIR</span>/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./java_demo.jar /app/</span><br><br><span class="hljs-comment"># 安装JDK</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cd</span> <span class="hljs-variable">$JAVA_DIR</span> \</span><br><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="language-bash"> &amp;&amp; <span class="hljs-built_in">mv</span> ./jdk1.8.0_161 ./java8 <span class="hljs-comment">#将./jdk1.8.0_161替换为你jdk压缩包的真正解压文件名</span></span><br><br><span class="hljs-comment"># 配置环境变量</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8<br><span class="hljs-keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin<br><br><span class="hljs-comment"># 暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-comment"># 入口，java项目的启动命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /app/java_demo.jar</span><br><br></code></pre></td></tr></table></figure><ol><li>在java-docker-compose-test目录下运行如下指令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -t java-docker-demo:1.0 .<br><br></code></pre></td></tr></table></figure><p> ps ：注意末尾的点，表示Dockerfile文件在当前目录下</p><ol><li>运行容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name java-demo -p 8080:8080 -d java-docker-demo:1.0<br><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="docker-hub实现镜像迁移"><a href="#docker-hub实现镜像迁移" class="headerlink" title="docker hub实现镜像迁移"></a>docker hub实现镜像迁移</h2><p>上述操作我是先在虚拟机上进行了试验，实验无误后我要迁移到服务器上，除了在服务器上重复上述步骤外，有个简便的方法就是利用docker hub推送镜像，并在服务器上拉取镜像并打成容器运行。</p><p>步骤：</p><p>1.如果还没有docker hub账号，需要先去<a href="https://hub.docker.com/">官网</a>注册一个，并创建一个你准备用来存放镜像的仓库。</p><p>2.在虚拟机上登录docker hub账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker login<br><br></code></pre></td></tr></table></figure><p>3.给镜像打标签：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker tag &lt;image_name&gt; &lt;docker_hub_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;<br><br></code></pre></td></tr></table></figure><p> 其中，image_name是本地镜像的名称， docker_hub_username是你的dockerHub用户名，repository_name是仓库名称， tag是要推送的镜像的标签。 </p><p>4.将镜像推送到dockerHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker push &lt;docker_hub_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;<br><br></code></pre></td></tr></table></figure><p>5.推送成功后即可在另一台服务器上拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull &lt;docker_hub_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;<br><br></code></pre></td></tr></table></figure><p>6.拉取完毕再根据镜像创建一个容器运行即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://pachwang.github.io/2023/05/02/Docker%E8%BF%90%E7%94%A8%E5%AE%9E%E6%88%98/">https://pachwang.github.io/2023/05/02/Docker%E8%BF%90%E7%94%A8%E5%AE%9E%E6%88%98/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>项目集成baskreport报表项目并实现单点登录</title>
    <link href="/2023/05/05/%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90baskreport%E6%8A%A5%E8%A1%A8%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    <url>/2023/05/05/%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90baskreport%E6%8A%A5%E8%A1%A8%E9%A1%B9%E7%9B%AE%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>在公司实习，有一个新的需求是在原有的项目中集成baskreport报表项目，并实现单点登录，baskreport官方文档的介绍过于简单，我琢磨了一天才得以实现，记录一下详细的实现过程。</p><h2 id="集成baskreport项目"><a href="#集成baskreport项目" class="headerlink" title="集成baskreport项目"></a>集成baskreport项目</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basksoft.report<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>baskreport-font<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basksoft.report<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>baskreport-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basksoft.report<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>baskreport-designer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-注册拦截器"><a href="#2-注册拦截器" class="headerlink" title="2.注册拦截器"></a>2.注册拦截器</h3><p>由于我的项目集成了SpringSecurity，只需要在原有的类中再注册一个baskreport的拦截过滤器即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourcesConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span><br>&#123;<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> FilterRegistrationBean&lt;BaskReportFilter&gt; <span class="hljs-title function_">registerReportFilter</span><span class="hljs-params">()</span> &#123;<br>      FilterRegistrationBean&lt;BaskReportFilter&gt; registration = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>&lt;BaskReportFilter&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BaskReportFilter</span>());<br>      registration.addUrlPatterns(<span class="hljs-string">&quot;/*&quot;</span>);<br>      registration.setName(<span class="hljs-string">&quot;baskreportFilter&quot;</span>);<br>      registration.setOrder(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">return</span> registration;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-springSecurity配置匿名访问"><a href="#3-springSecurity配置匿名访问" class="headerlink" title="3.springSecurity配置匿名访问"></a>3.springSecurity配置匿名访问</h3><p>此外，对于baskreport项目的路径，由于要使用其内置的认证逻辑，因此再springSecurity核心配置类中配置允许匿名访问url</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.antMatchers(<span class="hljs-string">&quot;/**baskreport/**&quot;</span>).anonymous()<br></code></pre></td></tr></table></figure><p>至此，项目已经成功集成了baskreport项目，可以通过改变url路径来直接进行访问，</p><p>譬如：我的项目启动地址是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span>/reconvue<br></code></pre></td></tr></table></figure><p>则baskreport项目地址是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span>/baskreport<br></code></pre></td></tr></table></figure><h2 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h2><p>此时在原有的系统中登录后，访问baskreport的页面仍然需要再次进行登录操作，接下来是配置单点登录的实现过程。</p><h3 id="1-自定义处理器"><a href="#1-自定义处理器" class="headerlink" title="1.自定义处理器"></a>1.自定义处理器</h3><p>首先需要添加官方文档中提供的两个处理类：注意两个类都需要添加@Component注解将他们放入容器，否则baskreport核心仍然会使用其默认的处理类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.basksoft.report.core.database.manager.role.RoleManager;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.manager.user.UserManager;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.model.Page;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.model.User;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.serivce.user.UserService;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ACCOUNT_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;account&quot;</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USERNAME_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;username&quot;</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DESC_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;desc&quot;</span>;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUsers</span><span class="hljs-params">(Page&lt;User&gt; page, Map&lt;String, Object&gt; map)</span> &#123;<br><br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> User <span class="hljs-title function_">get</span><span class="hljs-params">(String account)</span> &#123;<br>      <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserManager.ins.get(account);<br>      user.setRoles(RoleManager.ins.getUserRoles(user.getAccount()));<br>      <span class="hljs-keyword">return</span> user;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> User <span class="hljs-title function_">validate</span><span class="hljs-params">(String s, String s1)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.basksoft.report.console.security.entity.DefaultUser;<br><span class="hljs-keyword">import</span> com.basksoft.report.console.security.entity.User;<br><span class="hljs-keyword">import</span> com.basksoft.report.console.security.provider.SecurityProvider;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.model.Role;<br><span class="hljs-keyword">import</span> com.basksoft.report.core.database.serivce.user.UserServiceManager;<br><span class="hljs-keyword">import</span> com.bkdr.common.core.domain.model.LoginUser;<br><span class="hljs-keyword">import</span> com.bkdr.framework.web.service.TokenService;<br><span class="hljs-keyword">import</span> com.bkdr.framework.web.service.UserDetailsServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultSecurityProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityProvider</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LOGIN_USER=<span class="hljs-string">&quot;_baskreport_login_user&quot;</span>;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getLoginUser</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> req.getSession().getAttribute(LOGIN_USER);<br>      <span class="hljs-keyword">if</span> (obj!=<span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">return</span> (User)obj;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(HttpServletRequest req, String account, String password)</span> &#123;<br>      com.basksoft.report.core.database.model.<span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserServiceManager.getUserService().validate(account, password);<br><br>      List&lt;Role&gt; roles = com.basksoft.report.core.database.manager.role.RoleManager.ins.getUserRoles(account);<br>      List&lt;Long&gt; roleCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Long&gt;();<br>      <span class="hljs-keyword">if</span> (roles!=<span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">for</span> (Role role:roles) &#123;<br>            roleCodes.add(role.getId());<br>         &#125;<br>      &#125;<br>      <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultUser</span>(account, user.getUsername(), user.isEnable(), user.isAdmin(), roleCodes);<br>      req.getSession().setAttribute(LOGIN_USER, loginUser);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logout</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>      req.getSession().removeAttribute(LOGIN_USER);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-配置调用处理器"><a href="#2-配置调用处理器" class="headerlink" title="2.配置调用处理器"></a>2.配置调用处理器</h3><p>随后在系统原本的登录逻辑中调用自定义的DefaultSecurityProvider实现baskreport的登录即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.basksoft.report.console.security.SecurityUtils.getSecurityProvider().login(request, username, password);<br></code></pre></td></tr></table></figure><p>此时在登录原有的系统时会同时登录baskreport系统，此后当需要进行访问时，就不再需要登录认证了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dependencyManagement的理解</title>
    <link href="/2023/05/04/DependencyManagement%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2023/05/04/DependencyManagement%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="DependencyManagement的理解与遇到的问题"><a href="#DependencyManagement的理解与遇到的问题" class="headerlink" title="DependencyManagement的理解与遇到的问题"></a>DependencyManagement的理解与遇到的问题</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>在Maven中 <dependencyManagement>元素是用于管理依赖项的重要部分之一，它提供了一种集中式的方式来指定项目的依赖项及其版本号，以确保所有的子模块都使用相同的依赖版本或灵活地自定义依赖版本。 </p><p>示例说明：</p><p>在父模块中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么在子模块中只需要<groupId>和<artifactId>即可，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><dependencyManagement>元素的作用可以简单总结为：</p><ol><li>集中管理依赖版本：将所有子模块所需的依赖项及其版本定义在一个地方，确保所有子模块使用相同的依赖版本，避免版本冲突问题；当需要变更版本号的时候只需要在父类容器里更新，不需要任何一个子项目的修改；如果某个子项目需要另外一个特殊的版本号时，只需要在自己的模块dependencies中声明一个版本号即可。子类就会使用子类声明的版本号，不继承于父类版本号。</li><li>简化pom.xml文件：将一些通用的依赖项和版本号定义在<dependencyManagement>元素中，可以减少pom.xml文件的冗余信息，使其更易于维护和阅读；</li><li>提高项目的可维护性和稳定性：通过统一管理依赖版本，可以降低项目的维护成本，提高项目的稳定性和可维护性。</li></ol><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>​        在原有的项目中继承baskreport报表生成工具，要实现在原项目中登录操作后进入baskreport界面不需要再次进行登录操作的单点登录功能。</p><p>​        步骤：在父工程的dependencyManagement中添加完整依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basksoft.report<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>baskreport-font<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;baskreport-font.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basksoft.report<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>baskreport-designer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;baskreport-designer.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​        随后在子模块中直接引入，刷新maven依赖，依赖成功引入，此时运行项目报错！lombok依赖找不到了！尝试在子模块中依赖的模块中引入，报错swagger依赖找不到！此后进行了一系列清除缓存、重新加载依赖，重启项目的操作都没有作用，真的是吐血了…….最后将父模块中的上述代码删掉，改为直接在子模块中引入完整依赖，刷新maven，运行，项目启动成功！！！</p><p>​        在网上查找没有找到相似的经验贴，只能初步判定应该是依赖版本冲突的问题，个人也还没有理解其中的原因。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
